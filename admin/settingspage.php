<?php

/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class WpImageOffloader
{
  private $wps3_image_offloader_options;

  public function __construct()
  {
    add_action('admin_menu', array($this, 'wps3_image_offloader_add_plugin_page'));
    add_action('admin_init', array($this, 'wps3_image_offloader_page_init'));
  }

  public function wps3_image_offloader_add_plugin_page()
  {
    add_options_page(
      'Image Offloader', // page_title
      'Image Offloader', // menu_title
      'manage_options', // capability
      'image-offloader', // menu_slug
      array($this, 'wps3_image_offloader_create_admin_page') // function
    );
  }

  public function wps3_image_offloader_create_admin_page()
  {
    $this->wps3_image_offloader_options = get_option('wps3_image_offloader_option_name'); ?>

    <div class="wrap">
      <h2>Image Offloader</h2>
      <p>Set your AWS S3 Bucket settings below.</p>
      <?php settings_errors(); ?>

      <form method="post" action="options.php">
        <?php
        settings_fields('wps3_image_offloader_option_group');
        do_settings_sections('wps3-image-offloader-admin');
        submit_button();
        ?>
      </form>
    </div>
<?php }

  public function wps3_image_offloader_page_init()
  {
    register_setting(
      'wps3_image_offloader_option_group', // option_group
      'wps3_image_offloader_option_name', // option_name
      array($this, 'wps3_image_offloader_sanitize') // sanitize_callback
    );

    add_settings_section(
      'wps3_image_offloader_setting_section', // id
      'Settings', // title
      array($this, 'wps3_image_offloader_section_info'), // callback
      'wps3-image-offloader-admin' // page
    );

    add_settings_field(
      'wps3_activate_offloading', // id
      'Activate bucket', // title
      array($this, 'wps3_activate_offloading_callback'), // callback
      'wps3-image-offloader-admin', // page
      'wps3_image_offloader_setting_section' // section
    );

    add_settings_field(
      'wps3_bucket_name', // id
      'Bucket name', // title
      array($this, 'wps3_bucket_name_callback'), // callback
      'wps3-image-offloader-admin', // page
      'wps3_image_offloader_setting_section' // section
    );

    add_settings_field(
      'wps3_bucket_region', // id
      'Bucket region', // title
      array($this, 'wps3_bucket_region_callback'), // callback
      'wps3-image-offloader-admin', // page
      'wps3_image_offloader_setting_section' // section
    );

    add_settings_field(
      'wps3_remove_images', // id
      'Remove images', // title
      array($this, 'wps3_remove_images_callback'), // callback
      'wps3-image-offloader-admin', // page
      'wps3_image_offloader_setting_section' // section
    );
  }

  public function wps3_image_offloader_sanitize($input)
  {
    $sanitary_values = array();
    if (isset($input['wps3_activate_offloading'])) {
      $sanitary_values['wps3_activate_offloading'] = $input['wps3_activate_offloading'];
    }

    if (isset($input['wps3_bucket_name'])) {
      $sanitary_values['wps3_bucket_name'] = sanitize_text_field($input['wps3_bucket_name']);
    }

    if (isset($input['wps3_bucket_region'])) {
      $sanitary_values['wps3_bucket_region'] = sanitize_text_field($input['wps3_bucket_region']);
    }

    if (isset($input['wps3_remove_images'])) {
      $sanitary_values['wps3_remove_images'] = $input['wps3_remove_images'];
    }

    return $sanitary_values;
  }

  public function wps3_image_offloader_section_info()
  {
  }

  public function wps3_activate_offloading_callback()
  {
    printf(
      '<input type="checkbox" name="wps3_image_offloader_option_name[wps3_activate_offloading]" id="wps3_activate_offloading" value="wps3_activate_offloading" %s> <label for="wps3_activate_offloading">Checking this box will activate the offloading of newly uploaded images.</label>',
      (isset($this->wps3_image_offloader_options['wps3_activate_offloading']) && $this->wps3_image_offloader_options['wps3_activate_offloading'] === 'wps3_activate_offloading') ? 'checked' : ''
    );
  }

  public function wps3_bucket_name_callback()
  {
    printf(
      '<input class="regular-text" type="text" name="wps3_image_offloader_option_name[wps3_bucket_name]" id="wps3_bucket_name" value="%s">',
      isset($this->wps3_image_offloader_options['wps3_bucket_name']) ? esc_attr($this->wps3_image_offloader_options['wps3_bucket_name']) : ''
    );
  }

  public function wps3_bucket_region_callback()
  {
    printf(
      '<input class="regular-text" type="text" name="wps3_image_offloader_option_name[wps3_bucket_region]" id="wps3_bucket_region" value="%s">',
      isset($this->wps3_image_offloader_options['wps3_bucket_region']) ? esc_attr($this->wps3_image_offloader_options['wps3_bucket_region']) : ''
    );
  }

  public function wps3_remove_images_callback()
  {
    printf(
      '<input type="checkbox" name="wps3_image_offloader_option_name[wps3_remove_images]" id="wps3_remove_images" value="wps3_remove_images" %s> <label for="wps3_remove_images">Remove the images from the server after they are uploaded to s3. <b>Warning:</b> this cannot be undone.</label>',
      (isset($this->wps3_image_offloader_options['wps3_remove_images']) && $this->wps3_image_offloader_options['wps3_remove_images'] === 'wps3_remove_images') ? 'checked' : ''
    );
  }
}

if (is_admin()) {
  $wps3_image_offloader = new WpImageOffloader();
}

/* 
 * Retrieve this value with:
 * $wps3_image_offloader_options = get_option( 'wps3_image_offloader_option_name' ); // Array of All Options
 * $wps3_activate_offloading = $wps3_image_offloader_options['wps3_activate_offloading']; // wps3 Activate bucket
 * $wps3_bucket_name = $wps3_image_offloader_options['wps3_bucket_name']; // wps3 Bucket name
 * $wps3_bucket_region = $wps3_image_offloader_options['wps3_bucket_region']; // wps3 Bucket region
 * $wps3_remove_images = $wps3_image_offloader_options['wps3_remove_images']; // wps3 Remove images
 */
